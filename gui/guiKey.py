
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import *
import tkinter.messagebox as tkmb
import tkinter.filedialog as fd
import guiLanding
import sys
sys.path.append("../Kripto_3-MAIN/src/")
import key_generator as generator 

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets/frame1")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


class GenerateKey(Frame):
    def __init__(self, master):
        Frame.__init__(self, master, width = 1200, height = 800, bg = "#FFFFFF")

        #functions
        def random_pressed():
            self.entry_1.delete(1.0,END)
            self.entry_2.delete(1.0,END)
            self.entry_3.delete(1.0,END)

            self.entry_4.config(state=NORMAL)
            self.entry_4.delete(1.0,END)
            self.entry_4.config(state=DISABLED)

            p = generator.random_prime()
            q = generator.random_prime()
            self.entry_1.insert(END,p)
            self.entry_2.insert(END,q)
            n, totient = generator.initiate(p,q)
            e,n = generator.generate_public_key(n, totient)
            self.entry_3.insert(END,e)

        def check_prime():
            p = self.entry_1.get(1.0,END)
            q = self.entry_2.get(1.0,END)
            e = self.entry_3.get(1.0,END)
            if p == q:
                tkmb.showerror("Error", "p and q must be different")
                return False
            if not generator.is_prime(int(p)):
                tkmb.showerror("Error", "p is not prime")
                return False
            if not generator.is_prime(int(q)):
                tkmb.showerror("Error", "q is not prime")
                return False
            if not generator.check_relative_prime(((int(p)-1)*(int(q)-1)),int(e)):
                tkmb.showerror("Error", "e is not relative prime with totient(n) = (p-1)(q-1)")
                return False
            return True
            
        def save_pressed():
            if(check_prime()):
                p = self.entry_1.get(1.0,END)
                q = self.entry_2.get(1.0,END)
                n, totient = generator.initiate(int(p),int(q))
                pubkey = generator.generate_public_key(n, totient)
                prikey = generator.generate_private_key(totient, pubkey)

                self.entry_4.config(state=NORMAL)
                self.entry_4.delete(1.0,END)
                self.entry_4.insert(END,prikey[0])
                self.entry_4.config(state=DISABLED)
                
                savefilepub = ""
                savefilepriv = ""
                tkmb.showinfo("Save", "Save your public key")
                if savefilepub =="":
                    savefilepub = fd.asksaveasfilename(defaultextension=".pub")
                if savefilepub != "":
                    with open(savefilepub, 'w') as f:
                        f.write(str(pubkey))
                tkmb.showinfo("Save", "Save your private key")
                if savefilepriv =="":
                    savefilepriv = fd.asksaveasfilename(defaultextension=".priv")
                if savefilepriv != "":
                    with open(savefilepriv, 'w') as f:
                        f.write(str(prikey))
                tkmb.showinfo("Success", "Key saved")
        



        self.canvas = Canvas(
            master,
            bg = "#FFFFFF",
            height = 800,
            width = 1200,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_text(
            217.0,
            42.0,
            anchor="nw",
            text="Generate Public Key and Private Key",
            fill="#28293D",
            font=("Poppins SemiBold", 42 * -1)
        )

        self.canvas.create_text(
            95.0,
            128.65501403808594,
            anchor="nw",
            text="p Value",
            fill="#000000",
            font=("OpenSansRoman Regular", 20 * -1)
        )

        self.canvas.create_text(
            95.0,
            223.0,
            anchor="nw",
            text="q Value",
            fill="#000000",
            font=("OpenSansRoman Regular", 20 * -1)
        )

        self.canvas.create_text(
            557.0,
            475.0,
            anchor="nw",
            text="Result",
            fill="#28293D",
            font=("OpenSansRoman Bold", 26 * -1)
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            600.0,
            189.0,
            image=self.entry_image_1
        )
        self.entry_1 = Text(
            bd=0,
            bg="#D9E4E8",
            fg="#000716",
            font=("OpenSansRoman Regular", 20 * -1),
            highlightthickness=0,
        )
        self.entry_1.place(
            x=112,
            y=175,
            width=950,
            height=25.0
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas.create_image(
            600.0,
            290.068115234375,
            image=self.entry_image_2
        )
        self.entry_2 = Text(
            bd=0,
            bg="#D9E4E8",
            fg="#000716",
            font=("OpenSansRoman Regular", 20 * -1),
            highlightthickness=0,
        )
        self.entry_2.place(
            x=112,
            y=275,
            width=976.7358818054199,
            height=25.0
        )

        self.canvas.create_text(
            95.0,
            324.0,
            anchor="nw",
            text="e Value",
            fill="#000000",
            font=("OpenSansRoman Regular", 20 * -1)
        )

        self.canvas.create_text(
            95.0,
            518.6768798828125,
            anchor="nw",
            text="Private Key",
            fill="#000000",
            font=("OpenSansRoman Regular", 20 * -1)
        )

        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        self.entry_bg_3 = self.canvas.create_image(
            600.0,
            384.599853515625,
            image=self.entry_image_3
        )
        self.entry_3 = Text(
            bd=0,
            bg="#D9E4E8",
            fg="#000716",
            font=("OpenSansRoman Regular", 20 * -1),
            highlightthickness=0,
        )
        self.entry_3.place(
            x=112,
            y=370,
            width=976.7358818054199,
            height=25.0
        )

        self.entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        self.entry_bg_4 = self.canvas.create_image(
            600.0,
            586.0,
            image=self.entry_image_4
        )
        self.entry_4 = Text(
            bd=0,
            bg="#D9E4E8",
            fg="#000716",
            font=("OpenSansRoman Regular", 20 * -1),
            highlightthickness=0,
        )
        self.entry_4.config(state=DISABLED)
        self.entry_4.place(
            x=112,
            y=570,
            width=976.7358818054199,
            height=25.0
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.master.switch_frame(guiLanding.Landing),
            relief="flat"
        )
        self.button_1.place(
            x=618.8326416015625,
            y=695.80810546875,
            width=216.11448669433594,
            height=68.19168090820312
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: save_pressed(),
            relief="flat"
        )
        self.button_2.place(
            x=366.0,
            y=695.80810546875,
            width=216.11444091796875,
            height=68.19168090820312
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: random_pressed(),
            relief="flat"
        )
        self.button_3.place(
            x=890.0,
            y=459.0,
            width=215.0653076171875,
            height=68.19140625
        )        